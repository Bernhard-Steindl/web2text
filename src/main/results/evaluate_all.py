from collections import defaultdict
import sys
from numpy import floor
import pandas as pd
from scipy import stats
import glob

def main():
    """
    Statistical signficance testing of samples values generated by training and evaluating against reported metrics
    """

    # Results taken from paper
    metrics = {
            "cleaneval": {
                "accuracy": 0.84,
                "precision": 0.88,
                "recall":0.85,
                "f1":0.86
            },
            "web2text": {
                "accuracy": 0.86,
                "precision": 0.87,
                "recall":0.90,
                "f1":0.88
            }
    }

    for split in ["cleaneval", "web2text"]:
        result_files = glob.glob(f"*{split}*")
        metrics_of_split = metrics[split]
        for f in result_files:
            print(f)
            df = pd.read_csv(f)
            df.columns = ["_","accuracy","precision","recall","f1","accuracy_u","precision_u","recall_u","f1_u"]
            df = df.drop(columns=["_"])
            ttest = defaultdict(dict)
            for key, val in metrics_of_split.items():
                ttest[key]["ttest"],ttest[key]["p-value"] = round(stats.ttest_1samp(df[key], val)[0], 6) , round(stats.ttest_1samp(df[key], val)[1], 6)
            ttest_df = pd.concat([pd.DataFrame(ttest)])
            mean_std_df = pd.DataFrame([df.mean(), df.std()], index=["mean", "std"])
            print(pd.concat([ttest_df, mean_std_df]))
            print("\n")


    



if __name__ == '__main__':
  main()